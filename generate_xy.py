import sys
import numpy as np
np.set_printoptions(threshold=sys.maxsize)
from matplotlib import pyplot as plt
import matplotlib
import networkx as nx
import math

def find_edges(element, matrix):
    edges = []
    for i, matrix_i in enumerate(matrix):
        for j, value in enumerate(matrix_i):
            if value == element:
                edges.append((i, j))
    return edges

def add_edge_to_graph(G, e1, e2):
    G.add_edge(e1, e2)

data = [[0, 0, 12, 0], [-6, 0, -6, 0], [6, 0, -6, 0], [0, 0, -24, 0], [0, 0, -6, -6], [0, 0, -6, 6], [-18, 0, -6, 0], [-12, 0, -24, 0], [-12, 0, 12, 0], [-12, 0, -6, -6], [-12, 0, -6, 6], [-6, 0, 30, 0], [-6, 0, 12, -6], [-6, 0, 12, 6], [18, 0, -6, 0], [12, 0, -24, 0], [12, 0, 12, 0], [12, 0, -6, -6], [12, 0, -6, 6], [6, 0, 30, 0], [6, 0, 12, -6], [6, 0, 12, 6], [-9, -9, 3, -3], [-9, -9, -15, 3], [-9, 9, 3, 3], [-9, 9, -15, -3], [-3, -9, 3, 3], [-3, -9, 21, -3], [-3, -9, -15, -3], [-3, 9, 3, -3], [-3, 9, 21, 3], [-3, 9, -15, 3], [9, -9, 3, 3], [9, -9, -15, -3], [9, 9, 3, -3], [9, 9, -15, 3], [3, -9, 3, -3], [3, -9, 21, 3], [3, -9, -15, 3], [3, 9, 3, 3], [3, 9, 21, -3], [3, 9, -15, -3], [0, 0, 30, 6], [-15, -9, -15, -3], [15, 9, -15, -3], [-6, 0, -24, 6], [6, 0, -24, 6], [-15, 9, 3, -3], [-9, 9, 21, -3], [9, -9, 21, -3], [15, -9, 3, -3], [-32, -6, -12, 2], [-32, 6, -12, -2], [-30, -6, -18, -6], [-30, -6, -12, 0], [-30, -6, 6, 6], [-30, -6, 24, 0], [-30, 0, 12, 6], [-30, 6, -18, 6], [-30, 6, -12, 0], [-30, 6, 6, -6], [-30, 6, 24, 0], [-27, -9, -15, 9], [-27, -9, 3, 3], [-27, -9, 21, -3], [-27, -3, -27, 3], [-27, -3, -3, 3], [-27, -3, 33, 3], [-27, 3, -27, -3], [-27, 3, -3, -3], [-27, 3, 33, -3], [-27, 9, -15, 3], [-27, 9, 3, -3], [-27, 9, 21, 3], [-24, -12, -36, 0], [-24, -6, -18, 0], [-24, -6, 24, -6], [-24, 0, -24, 0], [-24, 0, -6, -6], [-24, 0, -6, 6], [-24, 0, 12, 0], [-24, 0, 30, -6], [-24, 0, 30, 6], [-24, 6, -18, 0], [-24, 6, 24, 6], [-24, 12, -36, 0], [-24, 18, -6, 0], [-22, -6, -12, 4], [-22, 0, -42, -4], [-22, 0, -42, 4], [-22, 0, -6, -4], [-22, 0, -6, 4], [-22, 0, 12, -2], [-22, 0, 12, 2], [-21, -9, -15, -9], [-21, -9, -15, 3], [-21, -9, 3, -3], [-21, -9, 21, 3], [-21, -9, 39, -3], [-21, -3, -39, -3], [-21, -3, -27, -3], [-21, -3, -3, -3], [-21, -3, 15, 3], [-21, 3, -39, 3], [-21, 3, -27, 3], [-21, 3, -9, -3], [-21, 3, -3, 3], [-21, 3, 15, -3], [-21, 9, -33, -9], [-21, 9, -33, 3], [-21, 9, -15, -3], [-21, 9, -15, 9], [-21, 9, 3, -9], [-21, 9, 3, 3], [-21, 9, 21, -3], [-19, -3, -3, -1], [-19, 3, -3, 1], [-18, -18, -24, 0], [-18, -18, 12, 0], [-18, -12, 6, 0], [-18, -12, 42, 0], [-18, -6, 24, 0], [-18, 0, -24, -6], [-18, 0, -24, 6], [-18, 0, 12, -6], [-18, 0, 12, 6], [-18, 0, 30, 0], [-18, 6, 24, 0], [-18, 12, 6, 0], [-18, 12, 42, 0], [-18, 18, -24, 0], [-18, 18, -6, 6], [-18, 18, 12, 0], [-17, -3, 27, -1], [-17, 3, -27, -5], [-17, 3, 27, 1], [-16, 0, 12, -4], [-16, 0, 12, 4], [-15, -9, -33, 3], [-15, -9, 3, 3], [-15, -9, 21, -3], [-15, -9, 21, 9], [-15, -9, 39, 3], [-15, -3, -39, 3], [-15, -3, -27, 3], [-15, -3, -3, 3], [-15, -3, 9, 3], [-15, 3, -39, -3], [-15, 3, -3, -3], [-15, 3, 9, -3], [-15, 9, -33, -3], [-15, 9, -33, 9], [-15, 9, -15, 3], [-15, 9, 3, 9], [-15, 9, 21, -9], [-15, 9, 21, 3], [-15, 9, 39, -3], [-14, -6, -30, 2], [-14, -6, 6, 2], [-14, -6, 18, -2], [-14, 0, 12, 2], [-14, 6, -30, -2], [-14, 6, 6, -2], [-14, 6, 18, 2], [-13, -3, -3, 5], [-13, -3, 15, -1], [-12, -6, -48, 6], [-12, -6, -30, 0], [-12, -6, -12, 6], [-12, -6, 0, -6], [-12, -6, 0, 6], [-12, -6, 6, 0], [-12, -6, 18, 0], [-12, -6, 24, 6], [-12, -6, 42, 0], [-12, 0, -42, -6], [-12, 0, -42, 6], [-12, 0, 30, -6], [-12, 0, 30, 6], [-12, 6, -48, -6], [-12, 6, -30, 0], [-12, 6, -12, -6], [-12, 6, 0, -6], [-12, 6, 0, 6], [-12, 6, 6, 0], [-12, 6, 18, 0], [-12, 6, 24, -6], [-12, 6, 42, 0], [-12, 12, 0, 0], [-12, 18, -24, 6], [-12, 18, -6, 0], [-12, 18, 30, 0], [-11, -3, -27, -1], [-11, 3, -27, 1], [-10, -6, 18, 2], [-10, -6, 54, 2], [-10, 6, 18, -2], [-10, 6, 54, -2], [-9, -9, -33, -3], [-9, -9, -33, 9], [-9, -9, 3, 9], [-9, -9, 21, -9], [-9, -9, 21, 3], [-9, -9, 39, -3], [-9, -3, -21, 3], [-9, -3, -9, 3], [-9, -3, -3, -3], [-9, -3, 9, -3], [-9, -3, 15, 3], [-9, -3, 33, -3], [-9, -3, 51, 3], [-9, 3, -21, -3], [-9, 3, -9, -3], [-9, 3, -3, 3], [-9, 3, 9, 3], [-9, 3, 15, -3], [-9, 3, 33, 3], [-9, 3, 51, -3], [-9, 9, -51, -3], [-9, 9, -33, 3], [-9, 9, -15, 9], [-9, 9, 3, -9], [-9, 9, 39, -9], [-9, 9, 39, 3], [-9, 15, -3, 3], [-8, -6, 0, -2], [-8, -6, 36, -2], [-8, 0, 30, -2], [-8, 0, 30, 2], [-8, 6, -18, -4], [-8, 6, 0, 2], [-8, 6, 36, 2], [-6, -18, 12, 0], [-6, -18, 48, 0], [-6, -12, -18, 0], [-6, -12, 6, 0], [-6, -12, 18, 0], [-6, -6, -30, -6], [-6, -6, -18, 6], [-6, -6, -12, 0], [-6, -6, 0, 0], [-6, -6, 6, -6], [-6, -6, 6, 6], [-6, -6, 18, -6], [-6, -6, 24, 0], [-6, -6, 54, -6], [-6, 0, -42, 0], [-6, 0, -24, -6], [-6, 0, -6, 12], [-6, 0, 30, -12], [-6, 0, 48, -6], [-6, 6, -30, 6], [-6, 6, -18, -6], [-6, 6, -18, 6], [-6, 6, -12, 0], [-6, 6, 0, 0], [-6, 6, 6, 6], [-6, 6, 18, -6], [-6, 6, 18, 6], [-6, 6, 24, 0], [-6, 6, 36, 0], [-6, 6, 54, 6], [-6, 12, -18, 0], [-6, 12, -12, 6], [-6, 12, 18, 0], [-6, 18, -24, 0], [-6, 18, -6, -6], [-6, 18, 12, 0], [-5, -9, 21, -1], [-5, -9, 39, 1], [-5, -3, -39, 1], [-5, -3, -3, 1], [-5, 3, -39, -1], [-5, 3, -3, -1], [-4, -6, -12, -2], [-4, -6, 0, 2], [-4, 0, -24, -4], [-4, 0, -24, 4], [-4, 0, -6, -2], [-4, 0, -6, 2], [-4, 0, 12, -4], [-4, 0, 12, 4], [-4, 6, -12, 2], [-4, 6, 0, -2], [-3, -9, -51, -3], [-3, -9, -33, -9], [-3, -9, -33, 3], [-3, -9, -15, 9], [-3, -9, 39, -9], [-3, -9, 39, 3], [-3, -3, -57, -3], [-3, -3, -39, 3], [-3, -3, -27, 3], [-3, -3, -21, -3], [-3, -3, -9, -3], [-3, -3, -3, 3], [-3, -3, 9, 3], [-3, -3, 15, -3], [-3, -3, 45, 3], [-3, 3, -57, 3], [-3, 3, -39, -3], [-3, 3, -27, -3], [-3, 3, -21, 3], [-3, 3, -9, 3], [-3, 3, -3, -3], [-3, 3, -3, 9], [-3, 3, 9, -3], [-3, 3, 15, -9], [-3, 3, 15, 3], [-3, 3, 45, -3], [-3, 9, -51, 3], [-3, 9, -33, -3], [-3, 9, -33, 9], [-3, 9, -15, -9], [-3, 9, 21, -9], [-3, 9, 39, -3], [-3, 9, 39, 9], [-3, 15, -3, -3], [-2, -6, -30, 2], [-2, -6, 6, 2], [-2, 0, -6, -4], [-2, 0, -6, 4], [-2, 6, -30, -2], [-2, 6, 6, -2], [-1, -3, 9, 1], [-1, 3, -27, -1], [-1, 3, 9, -1], [0, -18, 12, -6], [0, -12, -48, 0], [0, -12, -12, 0], [0, -12, 6, -6], [0, -12, 24, 0], [0, -6, -18, 0], [0, -6, -12, -6], [0, -6, 6, 0], [0, -6, 18, 0], [0, -6, 54, 0], [0, 0, -42, -6], [0, 0, -42, 6], [0, 0, 30, -6], [0, 0, 48, 0], [0, 6, -18, 0], [0, 6, -12, -6], [0, 6, 6, 0], [0, 6, 18, 0], [0, 6, 54, 0], [0, 12, -48, 0], [0, 12, -12, 0], [0, 12, 6, -6], [0, 12, 24, 0], [0, 18, 12, -6], [1, -3, -27, -1], [1, -3, 9, -1], [1, 3, 9, 1], [2, -6, -30, -2], [2, -6, 6, -2], [2, 0, -6, -4], [2, 0, -6, 4], [2, 6, -30, 2], [2, 6, 6, 2], [3, -15, -3, -3], [3, -9, -51, 3], [3, -9, -33, -3], [3, -9, -33, 9], [3, -9, -15, -9], [3, -9, 21, -9], [3, -9, 39, -3], [3, -9, 39, 9], [3, -3, -57, 3], [3, -3, -39, -3], [3, -3, -27, -3], [3, -3, -21, 3], [3, -3, -9, 3], [3, -3, -3, -3], [3, -3, -3, 9], [3, -3, 9, -3], [3, -3, 15, -9], [3, -3, 15, 3], [3, -3, 45, -3], [3, 3, -57, -3], [3, 3, -39, 3], [3, 3, -27, 3], [3, 3, -21, -3], [3, 3, -9, -3], [3, 3, -3, 3], [3, 3, 9, 3], [3, 3, 15, -3], [3, 3, 45, 3], [3, 9, -51, -3], [3, 9, -33, -9], [3, 9, -33, 3], [3, 9, -15, 9], [3, 9, 39, -9], [3, 9, 39, 3], [4, -6, -12, 2], [4, -6, 0, -2], [4, 0, -24, -4], [4, 0, -24, 4], [4, 0, -6, -2], [4, 0, -6, 2], [4, 0, 12, -4], [4, 0, 12, 4], [4, 6, -12, -2], [4, 6, 0, 2], [5, -3, -39, -1], [5, -3, -3, -1], [5, 3, -39, 1], [5, 3, -3, 1], [5, 9, 21, -1], [5, 9, 39, 1], [6, -18, -24, 0], [6, -18, -6, -6], [6, -18, 12, 0], [6, -12, -18, 0], [6, -12, -12, 6], [6, -12, 18, 0], [6, -6, -30, 6], [6, -6, -18, -6], [6, -6, -18, 6], [6, -6, -12, 0], [6, -6, 0, 0], [6, -6, 6, 6], [6, -6, 18, -6], [6, -6, 18, 6], [6, -6, 24, 0], [6, -6, 36, 0], [6, -6, 54, 6], [6, 0, -42, 0], [6, 0, -24, -6], [6, 0, -6, 12], [6, 0, 30, -12], [6, 0, 48, -6], [6, 6, -30, -6], [6, 6, -18, 6], [6, 6, -12, 0], [6, 6, 0, 0], [6, 6, 6, -6], [6, 6, 6, 6], [6, 6, 18, -6], [6, 6, 24, 0], [6, 6, 54, -6], [6, 12, -18, 0], [6, 12, 6, 0], [6, 12, 18, 0], [6, 18, 12, 0], [6, 18, 48, 0], [8, -6, -18, -4], [8, -6, 0, 2], [8, -6, 36, 2], [8, 0, 30, -2], [8, 0, 30, 2], [8, 6, 0, -2], [8, 6, 36, -2], [9, -15, -3, 3], [9, -9, -51, -3], [9, -9, -33, 3], [9, -9, -15, 9], [9, -9, 3, -9], [9, -9, 39, -9], [9, -9, 39, 3], [9, -3, -21, -3], [9, -3, -9, -3], [9, -3, -3, 3], [9, -3, 9, 3], [9, -3, 15, -3], [9, -3, 33, 3], [9, -3, 51, -3], [9, 3, -21, 3], [9, 3, -9, 3], [9, 3, -3, -3], [9, 3, 9, -3], [9, 3, 15, 3], [9, 3, 33, -3], [9, 3, 51, 3], [9, 9, -33, -3], [9, 9, -33, 9], [9, 9, 3, 9], [9, 9, 21, -9], [9, 9, 21, 3], [9, 9, 39, -3], [10, -6, 18, -2], [10, -6, 54, -2], [10, 6, 18, 2], [10, 6, 54, 2], [11, -3, -27, 1], [11, 3, -27, -1], [12, -18, -24, 6], [12, -18, -6, 0], [12, -18, 30, 0], [12, -12, 0, 0], [12, -6, -48, -6], [12, -6, -30, 0], [12, -6, -12, -6], [12, -6, 0, -6], [12, -6, 0, 6], [12, -6, 6, 0], [12, -6, 18, 0], [12, -6, 24, -6], [12, -6, 42, 0], [12, 0, -42, -6], [12, 0, -42, 6], [12, 0, 30, -6], [12, 0, 30, 6], [12, 6, -48, 6], [12, 6, -30, 0], [12, 6, -12, 6], [12, 6, 0, -6], [12, 6, 0, 6], [12, 6, 6, 0], [12, 6, 18, 0], [12, 6, 24, 6], [12, 6, 42, 0], [13, 3, -3, 5], [13, 3, 15, -1], [14, -6, -30, -2], [14, -6, 6, -2], [14, -6, 18, 2], [14, 0, 12, 2], [14, 6, -30, 2], [14, 6, 6, 2], [14, 6, 18, -2], [15, -9, -33, -3], [15, -9, -33, 9], [15, -9, -15, 3], [15, -9, 3, 9], [15, -9, 21, -9], [15, -9, 21, 3], [15, -9, 39, -3], [15, -3, -39, -3], [15, -3, -3, -3], [15, -3, 9, -3], [15, 3, -39, 3], [15, 3, -27, 3], [15, 3, -3, 3], [15, 3, 9, 3], [15, 9, -33, 3], [15, 9, 3, 3], [15, 9, 21, -3], [15, 9, 21, 9], [15, 9, 39, 3], [16, 0, 12, -4], [16, 0, 12, 4], [17, -3, -27, -5], [17, -3, 27, 1], [17, 3, 27, -1], [18, -18, -24, 0], [18, -18, -6, 6], [18, -18, 12, 0], [18, -12, 6, 0], [18, -12, 42, 0], [18, -6, 24, 0], [18, 0, -24, -6], [18, 0, -24, 6], [18, 0, 12, -6], [18, 0, 12, 6], [18, 0, 30, 0], [18, 6, 24, 0], [18, 12, 6, 0], [18, 12, 42, 0], [18, 18, -24, 0], [18, 18, 12, 0], [19, -3, -3, 1], [19, 3, -3, -1], [21, -9, -33, -9], [21, -9, -33, 3], [21, -9, -15, -3], [21, -9, -15, 9], [21, -9, 3, -9], [21, -9, 3, 3], [21, -9, 21, -3], [21, -3, -39, 3], [21, -3, -27, 3], [21, -3, -9, -3], [21, -3, -3, 3], [21, -3, 15, -3], [21, 3, -39, -3], [21, 3, -27, -3], [21, 3, -3, -3], [21, 3, 15, 3], [21, 9, -15, -9], [21, 9, -15, 3], [21, 9, 3, -3], [21, 9, 21, 3], [21, 9, 39, -3], [22, 0, -42, -4], [22, 0, -42, 4], [22, 0, -6, -4], [22, 0, -6, 4], [22, 0, 12, -2], [22, 0, 12, 2], [22, 6, -12, 4], [24, -18, -6, 0], [24, -12, -36, 0], [24, -6, -18, 0], [24, -6, 24, 6], [24, 0, -24, 0], [24, 0, -6, -6], [24, 0, -6, 6], [24, 0, 12, 0], [24, 0, 30, -6], [24, 0, 30, 6], [24, 6, -18, 0], [24, 6, 24, -6], [24, 12, -36, 0], [27, -9, -15, 3], [27, -9, 3, -3], [27, -9, 21, 3], [27, -3, -27, -3], [27, -3, -3, -3], [27, -3, 33, -3], [27, 3, -27, 3], [27, 3, -3, 3], [27, 3, 33, 3], [27, 9, -15, 9], [27, 9, 3, 3], [27, 9, 21, -3], [30, -6, -18, 6], [30, -6, -12, 0], [30, -6, 6, -6], [30, -6, 24, 0], [30, 0, 12, 6], [30, 6, -18, -6], [30, 6, -12, 0], [30, 6, 6, 6], [30, 6, 24, 0], [32, -6, -12, -2], [32, 6, -12, 2]]

x = []
y = []
for i in data:
    x.append(i[0]*np.sqrt(3)/36 + i[1]*np.sqrt(11)/36)
    y.append(i[2]/36 + i[3]*np.sqrt(33)/36)

#print(len(x))
points = np.array(list(zip(x, y)))
#print(points)
# dist = np.abs(points[np.newaxis, :, :] - points[:, np.newaxis, :]).min(axis=2)
dist = [[0 for _ in range(len(points))] for _ in range(len(points))]

for a in range(len(points)):
    for b in range(len(points)):
        p1 = points[a]
        p2 = points[b]
        curr_dist = np.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)
        if math.isclose(curr_dist, 1):
            dist[a][b] = 1
        else:
            dist[a][b] = 0

edges = find_edges(1, dist)

points = [tuple(point) for point in points]

G=nx.Graph()

for i in range(len(edges)):
    # print(points[edges[i][0]][0])
    # print(points[edges[i][1]][1])
    # add_edge_to_graph(G, points[edges[i][0]][0], points[edges[i][1]][1])
    add_edge_to_graph(G, points[edges[i][0]], points[edges[i][1]])

pos = {point: point for point in points}
'''
fig, ax = plt.subplots()

color_map = ['red' if node == (0.0, 0.3333333333333333) 
            else 'red' if node == (0.28867513459481287, -0.16666666666666666)
            else 'red' if node == (-0.28867513459481287, -0.16666666666666666)
            else 'yellow' for node in G] 
nx.draw(G, pos=pos, node_size=6, node_color=color_map, linewidths=0.7, edgecolors='black', edge_color='b', ax=ax, width=0.45)  # draw nodes and edges
print(len(G.edges()))

fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
plt.show()'''